

class TestClazz<T> {
    let field: T?

    function test(let this) -> TestClazz<T> {
        return new TestClass {
            field: null
        }
    }

    function a(let this) -> T {}
}

type TestClass<T> = TestClazz<T>

let a = new TestClass { field: 100.0 }
let b = a.test().field

let c = if true { error(0) } else { 100 }
let d = if true { 100 } else { error(0) }


function <T> some(value: T) -> T? {
    return value
}

function <T, E> ok(value: T) -> T!<E> {
    return value
}

function <T, E> error(error: E) -> T!<E> {}


interface TestInterface1 {}
interface TestInterface2 {
    function <S> test2(let this);
}

implements<T> TestInterface2 for T? where T: TestInterface1 {
    override function <S> test2(let this) {}
}

implements TestInterface2 for int {
    override function <S> test2(let this) {}
}

function <T: TestInterface1> aaa(i: T?) {
    let a = i.test2()
    ccc(i)
}

function <T> ccc(i: T) where T: TestInterface2 {}

function bbb(i: TestInterface2) {
    let b = i.test2()
}

interface Default {
    static function default() -> This;
}

implements Default for int {
    override static function default() -> This {
        return 0
    }
}

let a = int::default()
a = 100

interface TestInterface3: TestInterface4 {
    static function test3() -> This {
        return This::test4()
    }
}

interface TestInterface4 {
    static function test4() -> This;
}

function <T> aaaa() where T: TestInterface3 {
    let b = T::test3()
    let c = T::test4()
}

implements<T> TestInterface3 for T where T: TestInterface4 {
    override static function test3() -> This {
        let a = T::test3()
        let b = T::test4()
        return b
    }
}

implements<T> TestInterface4 for T {
    override static function test4() -> This {
        return This
    }
}

let d = int::test3()
let e = int::test4()

let func = |i, j| => i + j
let a = func(100, 200)

let array1 = new [for i => i * 2; 10]
let array2 = new [0; 100]
let array3 = new { 0, 10, 20 }
let array4 = new [for i => new TestClass { field: 0 }; 10]


let b = 100.0 + 100.0


import std::operator::add::Add

struct Value<T> {
    let value: T
}

implements<T> Add<T, T> for Value<T> where T: Add<T, T> {
    override function add(let this, other: T) -> T {
        let a = this
        let a = this.value
        let b = other
        return b
    }
}

let a = new Value { value: 100 }
let b = new Value { value: 100 }
let c = a + b.value

let d = 100 - 100
let d = 100 * 100
let d = 100 / 100
let d = 100 == 100


interface TestInterface5<T5> {
    function test5(let this) -> T5 ;
}

interface I1<T> {}

implements<T, I: I1<T>> TestInterface5<T> for I {
    override function test5(let this) -> T {}
}

implements I1<int> for int {}

function cccc(t: I1<int>) {
    let d = t.test5()
    let e: int = 100
    let c = dddd(e)
    let e = e.test5()
}

function <I: I1<int>> eeee(i: I) {
    let a = i.test5()
}

function <T, I: I1<T>> dddd(i: I) -> T {}


interface TestInterface6<T>: TestInterface7<T> {}
interface TestInterface7<T>: TestInterface8<T> {}
interface TestInterface8<T> {
    function test8(let this) -> T;
}

function <I: TestInterface6<int>> t8(i: I) {
    let a = i.test8()
    let b = tttt8(i)
}

function t82(i: TestInterface6<int>) {
    let c = i.test8()
    let d = tttt8(i)
}

function <T, I: TestInterface8<T>> tttt8(i: I) -> T {}

if true or false {}

let tuple1: (int, float) = (100, 100.0)
let tuple2 = (100, true)
let (tuple3, tuple4) = (100.0, 100)

class Tree {
    let field: Tree?
}

let object0 = new Tree { field: null }
let object1 = new Tree { field: new Tree { field: null } }

object0.field = object1.field

if true {
    let object2 = new Tree { field: null }

    object1.field = object2
}
