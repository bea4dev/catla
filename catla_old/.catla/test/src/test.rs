
use catla_std::operator::div;
use catla_std::operator::mul;
use catla_std::operator::sub;
use catla_std::operator::add;
use catla_std::string;
use catla_std::console::{print};
use catla_std::compare::equal;
use catla_std::compare::order;
use catla_transpile_std::memory::{ CatlaRefObject, CatlaRefManagement };
use catla_transpile_std::holder::{ CatlaObjectHolder, CatlaObjectDummyHolder };
use catla_transpile_std::holder::Hold;
impl<T, > CatlaRefObject<TestClazz<T, >> {

    pub fn __get_field(&self) -> Option<T>{ if self.is_mutex() { self.lock(); let value = self.
    field.get(); value.clone_ref_mutex(); self.unlock(); value } else { let value = self.field.get(); value.clone_ref(); value } }

    pub fn __get_non_static_field(&self) -> Option<T> { let value = self.field.get(); value.clone_ref(); value }

    pub fn __get_non_rcfield(&self) -> Option<T> { self.field.get()}

    pub fn __set_field(&self, new: Option<T>) { if self.is_mutex() { self.lock(); let value = self.field.get(); value.drop_ref_mutex(); self.field.set(new); self.unlock(); } else { let value = self.field.get(); value.drop_ref(); self.field.set(new); } }

    pub fn __set_non_staticfield(&self, new: Option<T>) { let value = self.field.get(); value.drop_ref(); self.field.set(new); }

    pub fn __set_non_rcfield(&self, new: Option<T>) { self.field.set(new); }

}
pub struct TestClazz<T, > {
    field: std::cell::Cell<Option<T>>,

    pub fn test() -> test::test::TestClazz<T, > {
        let temp_122_178_131550754741808_;
        let temp_129_178_131550754742544_for_convert;
        let temp_129_178_131550754742616_;
        let temp_157_162_131550754743288_field;
        let temp_164_168_131550754743576_for_convert;
        let temp_164_168_131550754743648_;
        let temp_164_168_131550754743744_;
        temp_164_168_131550754743744_ = None;
        temp_164_168_131550754743648_ = temp_164_168_131550754743744_;
        temp_164_168_131550754743576_for_convert = temp_164_168_131550754743648_;
        temp_157_162_131550754743288_field = temp_164_168_131550754743576_for_convert;
        let temp_129_178_131550754742624_new;
        temp_129_178_131550754742624_new = TestClass { field: std::cell::UnsafeCell::new(temp_157_162_131550754743288_field), };
        temp_129_178_131550754742544_for_convert = temp_129_178_131550754742616_;
        temp_122_178_131550754741808_ = temp_129_178_131550754742544_for_convert;
        return temp_122_178_131550754741808_;
    }
    pub fn a() -> T {
    }
}

let 
a
;
let temp_264_294_131550754734824_for_convert;
let temp_264_294_131550754734896_;
let temp_280_285_131550754735568_field;
let temp_287_292_131550754735856_for_convert;
let temp_287_292_131550754735928_;
let temp_287_292_131550754736024_;
temp_287_292_131550754736024_ = 100.0;
temp_287_292_131550754735928_ = temp_287_292_131550754736024_;
temp_287_292_131550754735856_for_convert = temp_287_292_131550754735928_;
temp_280_285_131550754735568_field = Some(temp_287_292_131550754735856_for_convert)
let temp_264_294_131550754734904_new;
temp_264_294_131550754734904_new = TestClass { field: std::cell::UnsafeCell::new(temp_280_285_131550754735568_field), };
temp_264_294_131550754734824_for_convert = temp_264_294_131550754734896_;
a = temp_264_294_131550754734824_for_convert;
let 
b
;
let temp_303_317_131550754732576_for_convert;
let temp_303_304_131550754732648_;
let temp_303_304_131550754732744_;
temp_303_304_131550754732744_ = a.clone_non_mutex();
temp_303_304_131550754732648_ = temp_303_304_131550754732744_;
let temp_309_311_131550754733440_;
temp_309_311_131550754733440_ = temp_303_304_131550754732648_.test();
temp_303_304_131550754732648_.drop_without_free();
let temp_312_317_131550754733784_;
temp_312_317_131550754733784_ = temp_309_311_131550754733440_.__get_non_static_field().hold();
temp_309_311_131550754733440_.drop_with_free();
temp_303_317_131550754732576_for_convert = temp_312_317_131550754733784_;
b = temp_303_317_131550754732576_for_convert;
let 
c
;
let temp_327_360_131550643395816_for_convert;
let temp_327_360_131550643395888_;
temp_327_360_131550643395816_for_convert = temp_327_360_131550643395888_;
c = temp_327_360_131550643395816_for_convert;
let 
d
;
let temp_369_402_131550643379472_for_convert;
let temp_369_402_131550643379544_;
temp_369_402_131550643379472_for_convert = temp_369_402_131550643379544_;
d = temp_369_402_131550643379472_for_convert;
pub fn some<T>(value: T, ) -> Option<T> {
    let temp_445_457_131550643372776_;
    let temp_452_457_131550643373512_for_convert;
    let temp_452_457_131550643373584_;
    let temp_452_457_131550643373680_;
    temp_452_457_131550643373680_ = value.clone_non_mutex();
    temp_452_457_131550643373584_ = temp_452_457_131550643373680_;
    temp_452_457_131550643373512_for_convert = temp_452_457_131550643373584_;
    temp_445_457_131550643372776_ = Some(temp_452_457_131550643373512_for_convert)
    return temp_445_457_131550643372776_;
}
pub fn ok<TE>(value: T, ) -> Result<T, E> {
    let temp_505_517_131550643361736_;
    let temp_512_517_131550643362472_for_convert;
    let temp_512_517_131550643362544_;
    let temp_512_517_131550643362640_;
    temp_512_517_131550643362640_ = value.clone();
    temp_512_517_131550643362544_ = temp_512_517_131550643362640_;
    temp_512_517_131550643362472_for_convert = temp_512_517_131550643362544_;
    temp_505_517_131550643361736_ = Ok(temp_512_517_131550643362472_for_convert)
    return temp_505_517_131550643361736_;
}
pub fn error<TE>(error: E, ) -> Result<T, E> {
}
pub trait TestInterface1<> {
}

pub trait TestInterface2<> {
    fn test2<S>() -> 
    () {
    }
}

pub fn aaa<T>(i: Option<T>, ) -> 
() {
    let 
    a
    ;
    let temp_907_916_131550643321000_for_convert;
    let temp_907_908_131550643321072_;
    let temp_907_908_131550643321168_;
    temp_907_908_131550643321168_ = i.clone_non_mutex();
    temp_907_908_131550643321072_ = temp_907_908_131550643321168_;
    let temp_914_916_131550643321864_;
    temp_914_916_131550643321864_ = temp_907_908_131550643321072_.test2();
    temp_907_908_131550643321072_.drop_without_free();
    temp_907_916_131550643321000_for_convert = temp_914_916_131550643321864_;
    a = temp_907_916_131550643321000_for_convert;
    let temp_921_927_131550643313056_;
    let temp_921_924_131550643313152_;
    temp_921_924_131550643313152_ = ccc.get().hold();
    let temp_925_926_131550643313760_;
    let temp_925_926_131550643313760_for_convert;
    let temp_925_926_131550643313832_;
    let temp_925_926_131550643313928_;
    temp_925_926_131550643313928_ = i.clone_non_mutex();
    temp_925_926_131550643313832_ = temp_925_926_131550643313928_;
    temp_925_926_131550643313760_for_convert = temp_925_926_131550643313832_;
    temp_925_926_131550643313760_ = temp_925_926_131550643313760_for_convert;
    let temp_924_927_131550643313240_;
    temp_924_927_131550643313240_ = temp_921_924_131550643313152_(temp_925_926_131550643313760_.borrow(), ).hold();
    temp_925_926_131550643313760_.drop_without_free();
    temp_921_927_131550643313056_ = temp_924_927_131550643313240_;
    temp_921_927_131550643313056_.drop_without_free();
}
pub fn ccc<T>(i: T, ) -> 
() where T: test::test::TestInterface2<>,  {
}
pub fn bbb(i: test::test::TestInterface2<>, ) -> 
() {
    let 
    b
    ;
    let temp_1028_1037_131550643305712_for_convert;
    let temp_1028_1029_131550643305784_;
    let temp_1028_1029_131550643305880_;
    temp_1028_1029_131550643305880_ = i.clone_non_mutex();
    temp_1028_1029_131550643305784_ = temp_1028_1029_131550643305880_;
    let temp_1035_1037_131550643306576_;
    temp_1035_1037_131550643306576_ = temp_1028_1029_131550643305784_.test2();
    temp_1028_1029_131550643305784_.drop_without_free();
    temp_1028_1037_131550643305712_for_convert = temp_1035_1037_131550643306576_;
    b = temp_1028_1037_131550643305712_for_convert;
}
pub trait Default<> {
    fn default() -> 
    Self {
    }
}

let 
a
;
let temp_1215_1229_131550643256432_for_convert;
let temp_1215_1218_131550643256504_;
let temp_1215_1218_131550643256600_;
temp_1215_1218_131550643256600_ = int;
temp_1215_1218_131550643256504_ = temp_1215_1218_131550643256600_;
let temp_1227_1229_131550643257296_;
temp_1227_1229_131550643257296_ = temp_1215_1218_131550643256504_.default();
temp_1215_1218_131550643256504_.drop_without_free();
temp_1215_1229_131550643256432_for_convert = temp_1227_1229_131550643257296_;
a = temp_1215_1229_131550643256432_for_convert;
let temp_1230_1237_131550642827992_;
let temp_1234_1237_131550643254944_for_convert;
let temp_1234_1237_131550643255016_;
let temp_1234_1237_131550643255112_;
temp_1234_1237_131550643255112_ = 100;
temp_1234_1237_131550643255016_ = temp_1234_1237_131550643255112_;
temp_1234_1237_131550643254944_for_convert = temp_1234_1237_131550643255016_;
temp_1230_1237_131550642827992_ = temp_1234_1237_131550643254944_for_convert;
let temp_1230_1231_131550643255688_for_convert;
let temp_1230_1231_131550643255760_;
let temp_1230_1231_131550643255856_;
temp_1230_1231_131550643255856_ = a.clone_non_mutex();
temp_1230_1231_131550643255760_ = temp_1230_1231_131550643255856_;
temp_1230_1231_131550643255688_for_convert = temp_1230_1231_131550643255760_;
temp_1230_1237_131550642827992_ = temp_1230_1231_131550643255688_for_convert;
pub trait TestInterface3<> {
    fn test3() -> 
    Self {
        let temp_1328_1348_131550643244952_;
        let temp_1335_1348_131550643245688_for_convert;
        let temp_1335_1339_131550643245760_;
        let temp_1335_1339_131550643245856_;
        temp_1335_1339_131550643245856_ = Self;
        temp_1335_1339_131550643245760_ = temp_1335_1339_131550643245856_;
        let temp_1346_1348_131550643246552_;
        temp_1346_1348_131550643246552_ = temp_1335_1339_131550643245760_.test4();
        temp_1335_1339_131550643245760_.drop_without_free();
        temp_1335_1348_131550643245688_for_convert = temp_1346_1348_131550643246552_;
        temp_1328_1348_131550643244952_ = temp_1335_1348_131550643245688_for_convert;
        return temp_1328_1348_131550643244952_;
    }
}

pub trait TestInterface4<> {
    fn test4() -> 
    Self {
    }
}

pub fn aaaa<T>() -> 
() where T: test::test::TestInterface3<>,  {
    let 
    b
    ;
    let temp_1483_1493_131550643229704_for_convert;
    let temp_1483_1484_131550643229776_;
    let temp_1483_1484_131550643229872_;
    temp_1483_1484_131550643229872_ = T.clone();
    temp_1483_1484_131550643229776_ = temp_1483_1484_131550643229872_;
    let temp_1491_1493_131550643230568_;
    temp_1491_1493_131550643230568_ = temp_1483_1484_131550643229776_.test3();
    temp_1483_1484_131550643229776_.drop_without_free();
    temp_1483_1493_131550643229704_for_convert = temp_1491_1493_131550643230568_;
    b = temp_1483_1493_131550643229704_for_convert;
    let 
    c
    ;
    let temp_1506_1516_131550643224000_for_convert;
    let temp_1506_1507_131550643224072_;
    let temp_1506_1507_131550643224168_;
    temp_1506_1507_131550643224168_ = T.clone();
    temp_1506_1507_131550643224072_ = temp_1506_1507_131550643224168_;
    let temp_1514_1516_131550643224864_;
    temp_1514_1516_131550643224864_ = temp_1506_1507_131550643224072_.test4();
    temp_1506_1507_131550643224072_.drop_without_free();
    temp_1506_1516_131550643224000_for_convert = temp_1514_1516_131550643224864_;
    c = temp_1506_1516_131550643224000_for_convert;
}
let 
d
;
let temp_1829_1841_131550643190616_for_convert;
let temp_1829_1832_131550643190688_;
let temp_1829_1832_131550643190784_;
temp_1829_1832_131550643190784_ = int;
temp_1829_1832_131550643190688_ = temp_1829_1832_131550643190784_;
let temp_1839_1841_131550643191480_;
temp_1839_1841_131550643191480_ = temp_1829_1832_131550643190688_.test3();
temp_1829_1832_131550643190688_.drop_without_free();
temp_1829_1841_131550643190616_for_convert = temp_1839_1841_131550643191480_;
d = temp_1829_1841_131550643190616_for_convert;
let 
e
;
let temp_1850_1862_131550643188368_for_convert;
let temp_1850_1853_131550643188440_;
let temp_1850_1853_131550643188536_;
temp_1850_1853_131550643188536_ = int;
temp_1850_1853_131550643188440_ = temp_1850_1853_131550643188536_;
let temp_1860_1862_131550643189232_;
temp_1860_1862_131550643189232_ = temp_1850_1853_131550643188440_.test4();
temp_1850_1853_131550643188440_.drop_without_free();
temp_1850_1862_131550643188368_for_convert = temp_1860_1862_131550643189232_;
e = temp_1850_1862_131550643188368_for_convert;
let 
func
;
let temp_1875_1890_131550643183328_for_convert;
func = temp_1875_1890_131550643183328_for_convert;
let 
a
;
let temp_1899_1913_131550643181064_for_convert;
let temp_1899_1913_131550643181136_;
let temp_1899_1903_131550643181232_;
temp_1899_1903_131550643181232_ = func.clone_non_mutex();
let temp_1904_1907_131550643182584_;
let temp_1904_1907_131550643182584_for_convert;
let temp_1904_1907_131550643182656_;
let temp_1904_1907_131550643182752_;
temp_1904_1907_131550643182752_ = 100;
temp_1904_1907_131550643182656_ = temp_1904_1907_131550643182752_;
temp_1904_1907_131550643182584_for_convert = temp_1904_1907_131550643182656_;
temp_1904_1907_131550643182584_ = temp_1904_1907_131550643182584_for_convert;
let temp_1909_1912_131550643181808_;
let temp_1909_1912_131550643181808_for_convert;
let temp_1909_1912_131550643181880_;
let temp_1909_1912_131550643181976_;
temp_1909_1912_131550643181976_ = 200;
temp_1909_1912_131550643181880_ = temp_1909_1912_131550643181976_;
temp_1909_1912_131550643181808_for_convert = temp_1909_1912_131550643181880_;
temp_1909_1912_131550643181808_ = temp_1909_1912_131550643181808_for_convert;
let temp_1903_1913_131550643181320_;
temp_1903_1913_131550643181320_ = temp_1899_1903_131550643181232_(temp_1904_1907_131550643182584_.borrow(), temp_1909_1912_131550643181808_.borrow(), ).hold();
temp_1909_1912_131550643181808_.drop_without_free();
temp_1904_1907_131550643182584_.drop_without_free();
temp_1899_1903_131550643181232_.drop_without_free();
temp_1899_1913_131550643181136_ = temp_1903_1913_131550643181320_;
temp_1899_1913_131550643181064_for_convert = temp_1899_1913_131550643181136_;
a = temp_1899_1913_131550643181064_for_convert;
let 
array1
;
let temp_1928_1952_131550643175976_for_convert;
let temp_1928_1952_131550643176048_;
temp_1928_1952_131550643175976_for_convert = temp_1928_1952_131550643176048_;
array1 = temp_1928_1952_131550643175976_for_convert;
let 
array2
;
let temp_1966_1978_131550643173744_for_convert;
let temp_1966_1978_131550643173816_;
temp_1966_1978_131550643173744_for_convert = temp_1966_1978_131550643173816_;
array2 = temp_1966_1978_131550643173744_for_convert;
let 
array3
;
let temp_1992_2009_131550643170480_for_convert;
let temp_1992_2009_131550643170552_;
temp_1992_2009_131550643170480_for_convert = temp_1992_2009_131550643170552_;
array3 = temp_1992_2009_131550643170480_for_convert;
let 
array4
;
let temp_2023_2068_131550643070888_for_convert;
let temp_2023_2068_131550643070960_;
temp_2023_2068_131550643070888_for_convert = temp_2023_2068_131550643070960_;
array4 = temp_2023_2068_131550643070888_for_convert;
let 
b
;
let temp_2079_2092_131550643067840_for_convert;
let temp_2079_2084_131550643067840_;
let temp_2079_2084_131550643067912_;
let temp_2079_2084_131550643068008_;
temp_2079_2084_131550643068008_ = 100.0;
temp_2079_2084_131550643067912_ = temp_2079_2084_131550643068008_;
temp_2079_2084_131550643067840_ = temp_2079_2084_131550643067912_;
let temp_2085_2086_131550643067840_operator;
let temp_2087_2092_131550643068608_;
let temp_2087_2092_131550643068680_;
let temp_2087_2092_131550643068776_;
temp_2087_2092_131550643068776_ = 100.0;
temp_2087_2092_131550643068680_ = temp_2087_2092_131550643068776_;
temp_2087_2092_131550643068608_ = temp_2087_2092_131550643068680_;
temp_2085_2086_131550643067840_operator = temp_2079_2084_131550643067840_.add(temp_2087_2092_131550643068608_);
temp_2079_2092_131550643067840_for_convert = temp_2085_2086_131550643067840_operator
b = temp_2079_2092_131550643067840_for_convert;
impl<T, > Value<T, > {

    pub fn __get_value(&self) -> T{ if self.is_mutex() { self.lock(); let value = self.
    value.get(); value.clone_ref_mutex(); self.unlock(); value } else { let value = self.value.get(); value.clone_ref(); value } }

    pub fn __get_non_static_value(&self) -> T { let value = self.value.get(); value.clone_ref(); value }

    pub fn __get_non_rcvalue(&self) -> T { self.value.get()}

    pub fn __set_value(&self, new: T) { if self.is_mutex() { self.lock(); let value = self.value.get(); value.drop_ref_mutex(); self.value.set(new); self.unlock(); } else { let value = self.value.get(); value.drop_ref(); self.value.set(new); } }

    pub fn __set_non_staticvalue(&self, new: T) { let value = self.value.get(); value.drop_ref(); self.value.set(new); }

    pub fn __set_non_rcvalue(&self, new: T) { self.value.set(new); }

}
pub struct Value<T, > {
    value: std::cell::Cell<T>,

}

let 
a
;
let temp_2380_2404_131550643039872_for_convert;
let temp_2380_2404_131550643039944_;
let temp_2392_2397_131550643040616_value;
let temp_2399_2402_131550643040904_for_convert;
let temp_2399_2402_131550643040976_;
let temp_2399_2402_131550643041072_;
temp_2399_2402_131550643041072_ = 100;
temp_2399_2402_131550643040976_ = temp_2399_2402_131550643041072_;
temp_2399_2402_131550643040904_for_convert = temp_2399_2402_131550643040976_;
temp_2392_2397_131550643040616_value = temp_2399_2402_131550643040904_for_convert;
let temp_2380_2404_131550643039952_new;
temp_2380_2404_131550643039952_new = Value { value: std::cell::UnsafeCell::new(temp_2392_2397_131550643040616_value), };
temp_2380_2404_131550643039872_for_convert = temp_2380_2404_131550643039944_;
a = temp_2380_2404_131550643039872_for_convert;
let 
b
;
let temp_2413_2437_131550643037968_for_convert;
let temp_2413_2437_131550643038040_;
let temp_2425_2430_131550643038712_value;
let temp_2432_2435_131550643039000_for_convert;
let temp_2432_2435_131550643039072_;
let temp_2432_2435_131550643039168_;
temp_2432_2435_131550643039168_ = 100;
temp_2432_2435_131550643039072_ = temp_2432_2435_131550643039168_;
temp_2432_2435_131550643039000_for_convert = temp_2432_2435_131550643039072_;
temp_2425_2430_131550643038712_value = temp_2432_2435_131550643039000_for_convert;
let temp_2413_2437_131550643038048_new;
temp_2413_2437_131550643038048_new = Value { value: std::cell::UnsafeCell::new(temp_2425_2430_131550643038712_value), };
temp_2413_2437_131550643037968_for_convert = temp_2413_2437_131550643038040_;
b = temp_2413_2437_131550643037968_for_convert;
let 
c
;
let temp_2446_2457_131550643033416_for_convert;
let temp_2446_2447_131550643033416_;
let temp_2446_2447_131550643033488_;
let temp_2446_2447_131550643033584_;
temp_2446_2447_131550643033584_ = a.clone_non_mutex();
temp_2446_2447_131550643033488_ = temp_2446_2447_131550643033584_;
temp_2446_2447_131550643033416_ = temp_2446_2447_131550643033488_;
let temp_2448_2449_131550643033416_operator;
let temp_2450_2457_131550643034184_;
let temp_2450_2451_131550643034256_;
let temp_2450_2451_131550643034352_;
temp_2450_2451_131550643034352_ = b.clone_non_mutex();
temp_2450_2451_131550643034256_ = temp_2450_2451_131550643034352_;
let temp_2452_2457_131550643036552_;
temp_2452_2457_131550643036552_ = temp_2450_2451_131550643034256_.__get_non_static_value().hold();
temp_2450_2451_131550643034256_.drop_without_free();
temp_2450_2457_131550643034184_ = temp_2452_2457_131550643036552_;
temp_2448_2449_131550643033416_operator = temp_2446_2447_131550643033416_.add(temp_2450_2457_131550643034184_);
temp_2446_2457_131550643033416_for_convert = temp_2448_2449_131550643033416_operator
c = temp_2446_2457_131550643033416_for_convert;
let 
d
;
let temp_2467_2476_131550643030368_for_convert;
let temp_2467_2470_131550643030368_;
let temp_2467_2470_131550643030440_;
let temp_2467_2470_131550643030536_;
temp_2467_2470_131550643030536_ = 100;
temp_2467_2470_131550643030440_ = temp_2467_2470_131550643030536_;
temp_2467_2470_131550643030368_ = temp_2467_2470_131550643030440_;
let temp_2471_2472_131550643030368_operator;
let temp_2473_2476_131550643031136_;
let temp_2473_2476_131550643031208_;
let temp_2473_2476_131550643031304_;
temp_2473_2476_131550643031304_ = 100;
temp_2473_2476_131550643031208_ = temp_2473_2476_131550643031304_;
temp_2473_2476_131550643031136_ = temp_2473_2476_131550643031208_;
temp_2471_2472_131550643030368_operator = temp_2467_2470_131550643030368_.sub(temp_2473_2476_131550643031136_);
temp_2467_2476_131550643030368_for_convert = temp_2471_2472_131550643030368_operator
d = temp_2467_2476_131550643030368_for_convert;
let 
d
;
let temp_2485_2494_131550643027512_for_convert;
let temp_2485_2488_131550643027512_;
let temp_2485_2488_131550643027584_;
let temp_2485_2488_131550643027680_;
temp_2485_2488_131550643027680_ = 100;
temp_2485_2488_131550643027584_ = temp_2485_2488_131550643027680_;
temp_2485_2488_131550643027512_ = temp_2485_2488_131550643027584_;
let temp_2489_2490_131550643027512_operator;
let temp_2491_2494_131550643028280_;
let temp_2491_2494_131550643028352_;
let temp_2491_2494_131550643028448_;
temp_2491_2494_131550643028448_ = 100;
temp_2491_2494_131550643028352_ = temp_2491_2494_131550643028448_;
temp_2491_2494_131550643028280_ = temp_2491_2494_131550643028352_;
temp_2489_2490_131550643027512_operator = temp_2485_2488_131550643027512_.mul(temp_2491_2494_131550643028280_);
temp_2485_2494_131550643027512_for_convert = temp_2489_2490_131550643027512_operator
d = temp_2485_2494_131550643027512_for_convert;
let 
d
;
let temp_2503_2512_131550643024656_for_convert;
let temp_2503_2506_131550643024656_;
let temp_2503_2506_131550643024728_;
let temp_2503_2506_131550643024824_;
temp_2503_2506_131550643024824_ = 100;
temp_2503_2506_131550643024728_ = temp_2503_2506_131550643024824_;
temp_2503_2506_131550643024656_ = temp_2503_2506_131550643024728_;
let temp_2507_2508_131550643024656_operator;
let temp_2509_2512_131550643025424_;
let temp_2509_2512_131550643025496_;
let temp_2509_2512_131550643025592_;
temp_2509_2512_131550643025592_ = 100;
temp_2509_2512_131550643025496_ = temp_2509_2512_131550643025592_;
temp_2509_2512_131550643025424_ = temp_2509_2512_131550643025496_;
temp_2507_2508_131550643024656_operator = temp_2503_2506_131550643024656_.div(temp_2509_2512_131550643025424_);
temp_2503_2512_131550643024656_for_convert = temp_2507_2508_131550643024656_operator
d = temp_2503_2512_131550643024656_for_convert;
let 
d
;
let temp_2521_2531_131550643021416_for_convert;
let temp_2521_2524_131550643021416_;
let temp_2521_2524_131550643021488_;
let temp_2521_2524_131550643021584_;
temp_2521_2524_131550643021584_ = 100;
temp_2521_2524_131550643021488_ = temp_2521_2524_131550643021584_;
temp_2521_2524_131550643021416_ = temp_2521_2524_131550643021488_;
let temp_2525_2527_131550643021416_operator;
let temp_2528_2531_131550643022184_;
let temp_2528_2531_131550643022256_;
let temp_2528_2531_131550643022352_;
temp_2528_2531_131550643022352_ = 100;
temp_2528_2531_131550643022256_ = temp_2528_2531_131550643022352_;
temp_2528_2531_131550643022184_ = temp_2528_2531_131550643022256_;
temp_2525_2527_131550643021416_operator = temp_2521_2524_131550643021416_.equals(temp_2528_2531_131550643022184_);
temp_2521_2531_131550643021416_for_convert = temp_2525_2527_131550643021416_operator
d = temp_2521_2531_131550643021416_for_convert;
pub trait TestInterface5<T5, > {
    fn test5() -> T5 {
    }
}

pub trait I1<T, > {
}

pub fn cccc(t: test::test::I1<
i32, >, ) -> 
() {
    let 
    d
    ;
    let temp_2795_2804_131550643004632_for_convert;
    let temp_2795_2796_131550643004704_;
    let temp_2795_2796_131550643004800_;
    temp_2795_2796_131550643004800_ = t.clone_non_mutex();
    temp_2795_2796_131550643004704_ = temp_2795_2796_131550643004800_;
    let temp_2802_2804_131550643005496_;
    temp_2802_2804_131550643005496_ = temp_2795_2796_131550643004704_.test5();
    temp_2795_2796_131550643004704_.drop_without_free();
    temp_2795_2804_131550643004632_for_convert = temp_2802_2804_131550643005496_;
    d = temp_2795_2804_131550643004632_for_convert;
    let 
    e
    : 
    i32
    ;
    let temp_2822_2825_131550643000304_for_convert;
    let temp_2822_2825_131550643000376_;
    let temp_2822_2825_131550643000472_;
    temp_2822_2825_131550643000472_ = 100;
    temp_2822_2825_131550643000376_ = temp_2822_2825_131550643000472_;
    temp_2822_2825_131550643000304_for_convert = temp_2822_2825_131550643000376_;
    e = temp_2822_2825_131550643000304_for_convert;
    let 
    c
    ;
    let temp_2838_2845_131550642998784_for_convert;
    let temp_2838_2845_131550642998856_;
    let temp_2838_2842_131550642998952_;
    temp_2838_2842_131550642998952_ = dddd.get().hold();
    let temp_2843_2844_131550642999560_;
    let temp_2843_2844_131550642999560_for_convert;
    let temp_2843_2844_131550642999632_;
    let temp_2843_2844_131550642999728_;
    temp_2843_2844_131550642999728_ = e.clone_non_mutex();
    temp_2843_2844_131550642999632_ = temp_2843_2844_131550642999728_;
    temp_2843_2844_131550642999560_for_convert = temp_2843_2844_131550642999632_;
    temp_2843_2844_131550642999560_ = temp_2843_2844_131550642999560_for_convert;
    let temp_2842_2845_131550642999040_;
    temp_2842_2845_131550642999040_ = temp_2838_2842_131550642998952_(temp_2843_2844_131550642999560_.borrow(), ).hold();
    temp_2843_2844_131550642999560_.drop_without_free();
    temp_2838_2845_131550642998856_ = temp_2842_2845_131550642999040_;
    temp_2838_2845_131550642998784_for_convert = temp_2838_2845_131550642998856_;
    c = temp_2838_2845_131550642998784_for_convert;
    let 
    e
    ;
    let temp_2858_2867_131550642996536_for_convert;
    let temp_2858_2859_131550642996608_;
    let temp_2858_2859_131550642996704_;
    temp_2858_2859_131550642996704_ = e.clone_non_mutex();
    temp_2858_2859_131550642996608_ = temp_2858_2859_131550642996704_;
    let temp_2865_2867_131550642997400_;
    temp_2865_2867_131550642997400_ = temp_2858_2859_131550642996608_.test5();
    temp_2858_2859_131550642996608_.drop_without_free();
    temp_2858_2867_131550642996536_for_convert = temp_2865_2867_131550642997400_;
    e = temp_2858_2867_131550642996536_for_convert;
}
pub fn eeee<I>(i: I, ) -> 
() {
    let 
    a
    ;
    let temp_2918_2927_131550642990912_for_convert;
    let temp_2918_2919_131550642990984_;
    let temp_2918_2919_131550642991080_;
    temp_2918_2919_131550642991080_ = i.clone_non_mutex();
    temp_2918_2919_131550642990984_ = temp_2918_2919_131550642991080_;
    let temp_2925_2927_131550642991776_;
    temp_2925_2927_131550642991776_ = temp_2918_2919_131550642990984_.test5();
    temp_2918_2919_131550642990984_.drop_without_free();
    temp_2918_2927_131550642990912_for_convert = temp_2925_2927_131550642991776_;
    a = temp_2918_2927_131550642990912_for_convert;
}
pub fn dddd<TI>(i: I, ) -> T {
}
pub trait TestInterface6<T, > {
}

pub trait TestInterface7<T, > {
}

pub trait TestInterface8<T, > {
    fn test8() -> T {
    }
}

pub fn t8<I>(i: I, ) -> 
() {
    let 
    a
    ;
    let temp_3200_3209_131550642970344_for_convert;
    let temp_3200_3201_131550642970416_;
    let temp_3200_3201_131550642970512_;
    temp_3200_3201_131550642970512_ = i.clone_non_mutex();
    temp_3200_3201_131550642970416_ = temp_3200_3201_131550642970512_;
    let temp_3207_3209_131550642971208_;
    temp_3207_3209_131550642971208_ = temp_3200_3201_131550642970416_.test8();
    temp_3200_3201_131550642970416_.drop_without_free();
    temp_3200_3209_131550642970344_for_convert = temp_3207_3209_131550642971208_;
    a = temp_3200_3209_131550642970344_for_convert;
    let 
    b
    ;
    let temp_3222_3230_131550642965368_for_convert;
    let temp_3222_3230_131550642965440_;
    let temp_3222_3227_131550642965536_;
    temp_3222_3227_131550642965536_ = tttt8.get().hold();
    let temp_3228_3229_131550642966144_;
    let temp_3228_3229_131550642966144_for_convert;
    let temp_3228_3229_131550642966216_;
    let temp_3228_3229_131550642966312_;
    temp_3228_3229_131550642966312_ = i.clone_non_mutex();
    temp_3228_3229_131550642966216_ = temp_3228_3229_131550642966312_;
    temp_3228_3229_131550642966144_for_convert = temp_3228_3229_131550642966216_;
    temp_3228_3229_131550642966144_ = temp_3228_3229_131550642966144_for_convert;
    let temp_3227_3230_131550642965624_;
    temp_3227_3230_131550642965624_ = temp_3222_3227_131550642965536_(temp_3228_3229_131550642966144_.borrow(), ).hold();
    temp_3228_3229_131550642966144_.drop_without_free();
    temp_3222_3230_131550642965440_ = temp_3227_3230_131550642965624_;
    temp_3222_3230_131550642965368_for_convert = temp_3222_3230_131550642965440_;
    b = temp_3222_3230_131550642965368_for_convert;
}
pub fn t82(i: test::test::TestInterface6<
i32, >, ) -> 
() {
    let 
    c
    ;
    let temp_3285_3294_131550642960864_for_convert;
    let temp_3285_3286_131550642960936_;
    let temp_3285_3286_131550642961032_;
    temp_3285_3286_131550642961032_ = i.clone_non_mutex();
    temp_3285_3286_131550642960936_ = temp_3285_3286_131550642961032_;
    let temp_3292_3294_131550642961728_;
    temp_3292_3294_131550642961728_ = temp_3285_3286_131550642960936_.test8();
    temp_3285_3286_131550642960936_.drop_without_free();
    temp_3285_3294_131550642960864_for_convert = temp_3292_3294_131550642961728_;
    c = temp_3285_3294_131550642960864_for_convert;
    let 
    d
    ;
    let temp_3307_3315_131550642955888_for_convert;
    let temp_3307_3315_131550642955960_;
    let temp_3307_3312_131550642956056_;
    temp_3307_3312_131550642956056_ = tttt8.get().hold();
    let temp_3313_3314_131550642956664_;
    let temp_3313_3314_131550642956664_for_convert;
    let temp_3313_3314_131550642956736_;
    let temp_3313_3314_131550642956832_;
    temp_3313_3314_131550642956832_ = i.clone_non_mutex();
    temp_3313_3314_131550642956736_ = temp_3313_3314_131550642956832_;
    temp_3313_3314_131550642956664_for_convert = temp_3313_3314_131550642956736_;
    temp_3313_3314_131550642956664_ = temp_3313_3314_131550642956664_for_convert;
    let temp_3312_3315_131550642956144_;
    temp_3312_3315_131550642956144_ = temp_3307_3312_131550642956056_(temp_3313_3314_131550642956664_.borrow(), ).hold();
    temp_3313_3314_131550642956664_.drop_without_free();
    temp_3307_3315_131550642955960_ = temp_3312_3315_131550642956144_;
    temp_3307_3315_131550642955888_for_convert = temp_3307_3315_131550642955960_;
    d = temp_3307_3315_131550642955888_for_convert;
}
pub fn tttt8<TI>(i: I, ) -> T {
}
let temp_3375_3394_131550642939128_;
temp_3375_3394_131550642939128_.drop_without_free();
let 
tuple1
: (
i32, 
f32, )
;
let temp_3423_3435_131550642935608_for_convert;
let temp_3423_3435_131550642935680_;
let temp_3423_3435_131550642935776_;
let temp_3424_3427_131550642937256_;
let temp_3424_3427_131550642937256_for_convert;
let temp_3424_3427_131550642937328_;
let temp_3424_3427_131550642937424_;
temp_3424_3427_131550642937424_ = 100;
temp_3424_3427_131550642937328_ = temp_3424_3427_131550642937424_;
temp_3424_3427_131550642937256_for_convert = temp_3424_3427_131550642937328_;
temp_3424_3427_131550642937256_ = temp_3424_3427_131550642937256_for_convert;
let temp_3429_3434_131550642936352_;
let temp_3429_3434_131550642936352_for_convert;
let temp_3429_3434_131550642936424_;
let temp_3429_3434_131550642936520_;
temp_3429_3434_131550642936520_ = 100.0;
temp_3429_3434_131550642936424_ = temp_3429_3434_131550642936520_;
temp_3429_3434_131550642936352_for_convert = temp_3429_3434_131550642936424_;
temp_3429_3434_131550642936352_ = temp_3429_3434_131550642936352_for_convert;
temp_3423_3435_131550642935776_ = (temp_3424_3427_131550642937256_, temp_3429_3434_131550642936352_);
temp_3423_3435_131550642935680_ = temp_3423_3435_131550642935776_;
temp_3423_3435_131550642935608_for_convert = temp_3423_3435_131550642935680_;
tuple1 = temp_3423_3435_131550642935608_for_convert;
let 
tuple2
;
let temp_3449_3460_131550642933216_for_convert;
let temp_3449_3460_131550642933288_;
let temp_3449_3460_131550642933384_;
let temp_3450_3453_131550642934864_;
let temp_3450_3453_131550642934864_for_convert;
let temp_3450_3453_131550642934936_;
let temp_3450_3453_131550642935032_;
temp_3450_3453_131550642935032_ = 100;
temp_3450_3453_131550642934936_ = temp_3450_3453_131550642935032_;
temp_3450_3453_131550642934864_for_convert = temp_3450_3453_131550642934936_;
temp_3450_3453_131550642934864_ = temp_3450_3453_131550642934864_for_convert;
let temp_3455_3459_131550642933960_;
let temp_3455_3459_131550642933960_for_convert;
let temp_3455_3459_131550642934032_;
let temp_3455_3459_131550642934128_;
temp_3455_3459_131550642934128_ = true;
temp_3455_3459_131550642934032_ = temp_3455_3459_131550642934128_;
temp_3455_3459_131550642933960_for_convert = temp_3455_3459_131550642934032_;
temp_3455_3459_131550642933960_ = temp_3455_3459_131550642933960_for_convert;
temp_3449_3460_131550642933384_ = (temp_3450_3453_131550642934864_, temp_3455_3459_131550642933960_);
temp_3449_3460_131550642933288_ = temp_3449_3460_131550642933384_;
temp_3449_3460_131550642933216_for_convert = temp_3449_3460_131550642933288_;
tuple2 = temp_3449_3460_131550642933216_for_convert;
let 
(tuple3, tuple4, )
;
let temp_3484_3496_131550642930344_for_convert;
let temp_3484_3496_131550642930416_;
let temp_3484_3496_131550642930512_;
let temp_3485_3490_131550642931992_;
let temp_3485_3490_131550642931992_for_convert;
let temp_3485_3490_131550642932064_;
let temp_3485_3490_131550642932160_;
temp_3485_3490_131550642932160_ = 100.0;
temp_3485_3490_131550642932064_ = temp_3485_3490_131550642932160_;
temp_3485_3490_131550642931992_for_convert = temp_3485_3490_131550642932064_;
temp_3485_3490_131550642931992_ = temp_3485_3490_131550642931992_for_convert;
let temp_3492_3495_131550642931088_;
let temp_3492_3495_131550642931088_for_convert;
let temp_3492_3495_131550642931160_;
let temp_3492_3495_131550642931256_;
temp_3492_3495_131550642931256_ = 100;
temp_3492_3495_131550642931160_ = temp_3492_3495_131550642931256_;
temp_3492_3495_131550642931088_for_convert = temp_3492_3495_131550642931160_;
temp_3492_3495_131550642931088_ = temp_3492_3495_131550642931088_for_convert;
temp_3484_3496_131550642930512_ = (temp_3485_3490_131550642931992_, temp_3492_3495_131550642931088_);
temp_3484_3496_131550642930416_ = temp_3484_3496_131550642930512_;
temp_3484_3496_131550642930344_for_convert = temp_3484_3496_131550642930416_;
(tuple3, tuple4, ) = temp_3484_3496_131550642930344_for_convert;
impl<> CatlaRefObject<Tree<>> {

    pub fn __get_field(&self) -> Option<test::test::Tree<>>{ if self.is_mutex() { self.lock(); let value = self.
    field.get(); value.clone_ref_mutex(); self.unlock(); value } else { let value = self.field.get(); value.clone_ref(); value } }

    pub fn __get_non_static_field(&self) -> Option<test::test::Tree<>> { let value = self.field.get(); value.clone_ref(); value }

    pub fn __get_non_rcfield(&self) -> Option<test::test::Tree<>> { self.field.get()}

    pub fn __set_field(&self, new: Option<test::test::Tree<>>) { if self.is_mutex() { self.lock(); let value = self.field.get(); value.drop_ref_mutex(); self.field.set(new); self.unlock(); } else { let value = self.field.get(); value.drop_ref(); self.field.set(new); } }

    pub fn __set_non_staticfield(&self, new: Option<test::test::Tree<>>) { let value = self.field.get(); value.drop_ref(); self.field.set(new); }

    pub fn __set_non_rcfield(&self, new: Option<test::test::Tree<>>) { self.field.set(new); }

}
pub struct Tree<> {
    field: std::cell::Cell<Option<test::test::Tree<>>>,

}

let 
object0
;
let temp_3549_3573_131550642924360_for_convert;
let temp_3549_3573_131550642924432_;
let temp_3560_3565_131550642925104_field;
let temp_3567_3571_131550642925392_for_convert;
let temp_3567_3571_131550642925464_;
let temp_3567_3571_131550642925560_;
temp_3567_3571_131550642925560_ = None;
temp_3567_3571_131550642925464_ = temp_3567_3571_131550642925560_;
temp_3567_3571_131550642925392_for_convert = temp_3567_3571_131550642925464_;
temp_3560_3565_131550642925104_field = temp_3567_3571_131550642925392_for_convert;
let temp_3549_3573_131550642924440_new;
temp_3549_3573_131550642924440_new = Tree { field: std::cell::UnsafeCell::new(temp_3560_3565_131550642925104_field), };
temp_3549_3573_131550642924360_for_convert = temp_3549_3573_131550642924432_;
object0 = temp_3549_3573_131550642924360_for_convert;
let 
object1
;
let temp_3588_3632_131550642921296_for_convert;
let temp_3588_3632_131550642921368_;
let temp_3599_3604_131550642922040_field;
let temp_3606_3630_131550642922328_for_convert;
let temp_3606_3630_131550642922400_;
let temp_3617_3622_131550642923072_field;
let temp_3624_3628_131550642923360_for_convert;
let temp_3624_3628_131550642923432_;
let temp_3624_3628_131550642923528_;
temp_3624_3628_131550642923528_ = None;
temp_3624_3628_131550642923432_ = temp_3624_3628_131550642923528_;
temp_3624_3628_131550642923360_for_convert = temp_3624_3628_131550642923432_;
temp_3617_3622_131550642923072_field = temp_3624_3628_131550642923360_for_convert;
let temp_3606_3630_131550642922408_new;
temp_3606_3630_131550642922408_new = Tree { field: std::cell::UnsafeCell::new(temp_3617_3622_131550642923072_field), };
temp_3606_3630_131550642922328_for_convert = temp_3606_3630_131550642922400_;
temp_3599_3604_131550642922040_field = Some(temp_3606_3630_131550642922328_for_convert)
let temp_3588_3632_131550642921376_new;
temp_3588_3632_131550642921376_new = Tree { field: std::cell::UnsafeCell::new(temp_3599_3604_131550642922040_field), };
temp_3588_3632_131550642921296_for_convert = temp_3588_3632_131550642921368_;
object1 = temp_3588_3632_131550642921296_for_convert;
let temp_3634_3663_131550642866872_;
let temp_3650_3663_131550642806208_for_convert;
let temp_3650_3657_131550642806280_;
let temp_3650_3657_131550642806376_;
temp_3650_3657_131550642806376_ = object1.clone_non_mutex();
temp_3650_3657_131550642806280_ = temp_3650_3657_131550642806376_;
let temp_3658_3663_131550642807040_;
temp_3658_3663_131550642807040_ = temp_3650_3657_131550642806280_.__get_field().hold();
temp_3650_3657_131550642806280_.drop_without_free();
temp_3650_3663_131550642806208_for_convert = temp_3658_3663_131550642807040_;
temp_3634_3663_131550642866872_ = temp_3650_3663_131550642806208_for_convert;
let temp_3634_3647_131550642808456_for_convert;
let temp_3634_3641_131550642808528_;
let temp_3634_3641_131550642808624_;
temp_3634_3641_131550642808624_ = object0.clone_non_mutex();
temp_3634_3641_131550642808528_ = temp_3634_3641_131550642808624_;
let temp_3642_3647_131550642809288_;
temp_3642_3647_131550642809288_ = temp_3634_3641_131550642808528_.__get_field().hold();
temp_3634_3641_131550642808528_.drop_without_free();
temp_3634_3647_131550642808456_for_convert = temp_3642_3647_131550642809288_;
temp_3634_3663_131550642866872_ = temp_3634_3647_131550642808456_for_convert;
let temp_3665_3748_131550642776520_;
temp_3665_3748_131550642776520_.drop_without_free();
let 
arg_0
;
let temp_3762_3786_131550642774544_for_convert;
let temp_3762_3786_131550642774616_;
let temp_3773_3778_131550642775288_field;
let temp_3780_3784_131550642775576_for_convert;
let temp_3780_3784_131550642775648_;
let temp_3780_3784_131550642775744_;
temp_3780_3784_131550642775744_ = None;
temp_3780_3784_131550642775648_ = temp_3780_3784_131550642775744_;
temp_3780_3784_131550642775576_for_convert = temp_3780_3784_131550642775648_;
temp_3773_3778_131550642775288_field = temp_3780_3784_131550642775576_for_convert;
let temp_3762_3786_131550642774624_new;
temp_3762_3786_131550642774624_new = Tree { field: std::cell::UnsafeCell::new(temp_3773_3778_131550642775288_field), };
temp_3762_3786_131550642774544_for_convert = temp_3762_3786_131550642774616_;
arg_0 = temp_3762_3786_131550642774544_for_convert;
let 
arg_1
;
let temp_3799_3823_131550642772640_for_convert;
let temp_3799_3823_131550642772712_;
let temp_3810_3815_131550642773384_field;
let temp_3817_3821_131550642773672_for_convert;
let temp_3817_3821_131550642773744_;
let temp_3817_3821_131550642773840_;
temp_3817_3821_131550642773840_ = None;
temp_3817_3821_131550642773744_ = temp_3817_3821_131550642773840_;
temp_3817_3821_131550642773672_for_convert = temp_3817_3821_131550642773744_;
temp_3810_3815_131550642773384_field = temp_3817_3821_131550642773672_for_convert;
let temp_3799_3823_131550642772720_new;
temp_3799_3823_131550642772720_new = Tree { field: std::cell::UnsafeCell::new(temp_3810_3815_131550642773384_field), };
temp_3799_3823_131550642772640_for_convert = temp_3799_3823_131550642772712_;
arg_1 = temp_3799_3823_131550642772640_for_convert;
let temp_3825_3852_131550642765920_;
let temp_3825_3838_131550642766016_;
temp_3825_3838_131550642766016_ = lifetime_test.get().hold();
let temp_3839_3844_131550642767368_;
let temp_3839_3844_131550642767368_for_convert;
let temp_3839_3844_131550642767440_;
let temp_3839_3844_131550642767536_;
temp_3839_3844_131550642767536_ = arg_0.clone_non_mutex();
temp_3839_3844_131550642767440_ = temp_3839_3844_131550642767536_;
temp_3839_3844_131550642767368_for_convert = temp_3839_3844_131550642767440_;
temp_3839_3844_131550642767368_ = temp_3839_3844_131550642767368_for_convert;
let temp_3846_3851_131550642766592_;
let temp_3846_3851_131550642766592_for_convert;
let temp_3846_3851_131550642766664_;
let temp_3846_3851_131550642766760_;
temp_3846_3851_131550642766760_ = arg_1.clone_non_mutex();
temp_3846_3851_131550642766664_ = temp_3846_3851_131550642766760_;
temp_3846_3851_131550642766592_for_convert = temp_3846_3851_131550642766664_;
temp_3846_3851_131550642766592_ = temp_3846_3851_131550642766592_for_convert;
let temp_3838_3852_131550642766104_;
temp_3838_3852_131550642766104_ = temp_3825_3838_131550642766016_(temp_3839_3844_131550642767368_.borrow(), temp_3846_3851_131550642766592_.borrow(), ).hold();
temp_3846_3851_131550642766592_.drop_without_free();
temp_3839_3844_131550642767368_.drop_without_free();
temp_3825_3852_131550642765920_ = temp_3838_3852_131550642766104_;
temp_3825_3852_131550642765920_.drop_without_free();
pub fn lifetime_test(arg0: test::test::Tree<>, arg1: test::test::Tree<>, ) -> 
() {
    let temp_3907_3924_131550642757904_;
    let temp_3920_3924_131550642761352_for_convert;
    let temp_3920_3924_131550642761424_;
    let temp_3920_3924_131550642761520_;
    temp_3920_3924_131550642761520_ = arg0.clone_non_mutex();
    temp_3920_3924_131550642761424_ = temp_3920_3924_131550642761520_;
    temp_3920_3924_131550642761352_for_convert = temp_3920_3924_131550642761424_;
    temp_3907_3924_131550642757904_ = Some(temp_3920_3924_131550642761352_for_convert)
    let temp_3907_3917_131550642762096_for_convert;
    let temp_3907_3911_131550642762168_;
    let temp_3907_3911_131550642762264_;
    temp_3907_3911_131550642762264_ = arg1.clone_non_mutex();
    temp_3907_3911_131550642762168_ = temp_3907_3911_131550642762264_;
    let temp_3912_3917_131550642762928_;
    temp_3912_3917_131550642762928_ = temp_3907_3911_131550642762168_.__get_non_static_field().hold();
    temp_3907_3911_131550642762168_.drop_without_free();
    temp_3907_3917_131550642762096_for_convert = temp_3912_3917_131550642762928_;
    temp_3907_3924_131550642757904_ = temp_3907_3917_131550642762096_for_convert;
}
let 
captured
;
let temp_3943_3967_131550642755912_for_convert;
let temp_3943_3967_131550642755984_;
let temp_3954_3959_131550642756656_field;
let temp_3961_3965_131550642756944_for_convert;
let temp_3961_3965_131550642757016_;
let temp_3961_3965_131550642757112_;
temp_3961_3965_131550642757112_ = None;
temp_3961_3965_131550642757016_ = temp_3961_3965_131550642757112_;
temp_3961_3965_131550642756944_for_convert = temp_3961_3965_131550642757016_;
temp_3954_3959_131550642756656_field = temp_3961_3965_131550642756944_for_convert;
let temp_3943_3967_131550642755992_new;
temp_3943_3967_131550642755992_new = Tree { field: std::cell::UnsafeCell::new(temp_3954_3959_131550642756656_field), };
temp_3943_3967_131550642755912_for_convert = temp_3943_3967_131550642755984_;
captured = temp_3943_3967_131550642755912_for_convert;
let 
closure
;
let temp_3983_4012_131550642750144_for_convert;
closure = temp_3983_4012_131550642750144_for_convert;
let 
temp
: Option<test::test::Tree<>>
;
let temp_4039_4043_131550642748736_for_convert;
let temp_4039_4043_131550642748808_;
let temp_4039_4043_131550642748904_;
temp_4039_4043_131550642748904_ = None;
temp_4039_4043_131550642748808_ = temp_4039_4043_131550642748904_;
temp_4039_4043_131550642748736_for_convert = temp_4039_4043_131550642748808_;
temp = temp_4039_4043_131550642748736_for_convert;
let temp_4045_4054_131550642746576_;
let temp_4045_4052_131550642746672_;
temp_4045_4052_131550642746672_ = closure.clone_non_mutex();
let temp_4052_4054_131550642746760_;
temp_4052_4054_131550642746760_ = temp_4045_4052_131550642746672_().hold();
temp_4045_4052_131550642746672_.drop_without_free();
temp_4045_4054_131550642746576_ = temp_4052_4054_131550642746760_;
temp_4045_4054_131550642746576_.drop_without_free();
pub fn recursive() -> test::test::Tree<> {
    let 
    temp
    ;
    let temp_4103_4114_131550642745632_for_convert;
    let temp_4103_4114_131550642745704_;
    let temp_4103_4112_131550642745800_;
    temp_4103_4112_131550642745800_ = recursive.get().hold();
    let temp_4112_4114_131550642745888_;
    temp_4112_4114_131550642745888_ = temp_4103_4112_131550642745800_().hold();
    temp_4103_4114_131550642745704_ = temp_4112_4114_131550642745888_;
    temp_4103_4114_131550642745632_for_convert = temp_4103_4114_131550642745704_;
    temp = temp_4103_4114_131550642745632_for_convert;
    let temp_4119_4130_131550642737720_;
    let temp_4126_4130_131550642738456_for_convert;
    let temp_4126_4130_131550642738528_;
    let temp_4126_4130_131550642738624_;
    temp_4126_4130_131550642738624_ = temp.clone();
    temp_4126_4130_131550642738528_ = temp_4126_4130_131550642738624_;
    temp_4126_4130_131550642738456_for_convert = temp_4126_4130_131550642738528_;
    temp_4119_4130_131550642737720_ = temp_4126_4130_131550642738456_for_convert;
    return temp_4119_4130_131550642737720_;
}
let 
ok_temp0
;
let temp_4149_4177_131550642734952_for_convert;
let temp_4149_4177_131550642735024_;
let temp_4149_4151_131550642735120_;
temp_4149_4151_131550642735120_ = ok.get().hold();
let temp_4152_4176_131550642735728_;
let temp_4152_4176_131550642735728_for_convert;
let temp_4152_4176_131550642735800_;
let temp_4163_4168_131550642736472_field;
let temp_4170_4174_131550642736760_for_convert;
let temp_4170_4174_131550642736832_;
let temp_4170_4174_131550642736928_;
temp_4170_4174_131550642736928_ = None;
temp_4170_4174_131550642736832_ = temp_4170_4174_131550642736928_;
temp_4170_4174_131550642736760_for_convert = temp_4170_4174_131550642736832_;
temp_4163_4168_131550642736472_field = temp_4170_4174_131550642736760_for_convert;
let temp_4152_4176_131550642735808_new;
temp_4152_4176_131550642735808_new = Tree { field: std::cell::UnsafeCell::new(temp_4163_4168_131550642736472_field), };
temp_4152_4176_131550642735728_for_convert = temp_4152_4176_131550642735800_;
temp_4152_4176_131550642735728_ = temp_4152_4176_131550642735728_for_convert;
let temp_4151_4177_131550642735208_;
temp_4151_4177_131550642735208_ = temp_4149_4151_131550642735120_(temp_4152_4176_131550642735728_.borrow(), ).hold();
temp_4152_4176_131550642735728_.drop_with_free();
temp_4149_4177_131550642735024_ = temp_4151_4177_131550642735208_;
temp_4149_4177_131550642734952_for_convert = temp_4149_4177_131550642735024_;
ok_temp0 = temp_4149_4177_131550642734952_for_convert;
let 
ok_temp1
;
let temp_4193_4201_131550642733432_for_convert;
let temp_4193_4201_131550642733504_;
let temp_4193_4195_131550642733600_;
temp_4193_4195_131550642733600_ = ok.get().hold();
let temp_4196_4200_131550642734208_;
let temp_4196_4200_131550642734208_for_convert;
let temp_4196_4200_131550642734280_;
let temp_4196_4200_131550642734376_;
temp_4196_4200_131550642734376_ = temp.get().hold();
temp_4196_4200_131550642734280_ = temp_4196_4200_131550642734376_;
temp_4196_4200_131550642734208_for_convert = temp_4196_4200_131550642734280_;
temp_4196_4200_131550642734208_ = temp_4196_4200_131550642734208_for_convert;
let temp_4195_4201_131550642733688_;
temp_4195_4201_131550642733688_ = temp_4193_4195_131550642733600_(temp_4196_4200_131550642734208_.borrow(), ).hold();
temp_4196_4200_131550642734208_.drop_with_free();
temp_4193_4201_131550642733504_ = temp_4195_4201_131550642733688_;
temp_4193_4201_131550642733432_for_convert = temp_4193_4201_131550642733504_;
ok_temp1 = temp_4193_4201_131550642733432_for_convert;
let 
i_convert_0
;
let temp_4221_4255_131550642717088_for_convert;
let temp_4221_4255_131550642717160_;
temp_4221_4255_131550642717088_for_convert = temp_4221_4255_131550642717160_;
i_convert_0 = temp_4221_4255_131550642717088_for_convert;
let 
nullable
: Option<Option<Option<test::test::Tree<>>>>
;
let temp_4281_4285_131550642715800_for_convert;
let temp_4281_4285_131550642715872_;
let temp_4281_4285_131550642715968_;
temp_4281_4285_131550642715968_ = None;
temp_4281_4285_131550642715872_ = temp_4281_4285_131550642715968_;
temp_4281_4285_131550642715800_for_convert = temp_4281_4285_131550642715872_;
nullable = temp_4281_4285_131550642715800_for_convert;
let 
nullable_field
;
let temp_4307_4326_131550642713552_for_convert;
let temp_4307_4316_131550642713624_;
let temp_4307_4315_131550642713720_;
temp_4307_4315_131550642713720_ = nullable.clone_non_mutex();
temp_4307_4316_131550642713624_ = temp_4307_4315_131550642713720_;
let temp_4321_4326_131550642715136_;
temp_4321_4326_131550642715136_ = temp_4307_4316_131550642713624_.__get_non_static_field().hold();
temp_4307_4316_131550642713624_.drop_without_free();
temp_4307_4326_131550642713552_for_convert = temp_4321_4326_131550642715136_;
nullable_field = temp_4307_4326_131550642713552_for_convert;
let 
a
;
let temp_4336_4454_131550642695728_for_convert;
let temp_4336_4454_131550642695800_;
temp_4336_4454_131550642695728_for_convert = temp_4336_4454_131550642695800_;
a = temp_4336_4454_131550642695728_for_convert;
let 
a
;
let temp_4464_4488_131550642693824_for_convert;
let temp_4464_4488_131550642693896_;
let temp_4475_4480_131550642694568_field;
let temp_4482_4486_131550642694856_for_convert;
let temp_4482_4486_131550642694928_;
let temp_4482_4486_131550642695024_;
temp_4482_4486_131550642695024_ = None;
temp_4482_4486_131550642694928_ = temp_4482_4486_131550642695024_;
temp_4482_4486_131550642694856_for_convert = temp_4482_4486_131550642694928_;
temp_4475_4480_131550642694568_field = temp_4482_4486_131550642694856_for_convert;
let temp_4464_4488_131550642693904_new;
temp_4464_4488_131550642693904_new = Tree { field: std::cell::UnsafeCell::new(temp_4475_4480_131550642694568_field), };
temp_4464_4488_131550642693824_for_convert = temp_4464_4488_131550642693896_;
a = temp_4464_4488_131550642693824_for_convert;
let temp_4489_4517_131550642882424_;
let temp_4493_4517_131550642691176_for_convert;
let temp_4493_4517_131550642691248_;
let temp_4504_4509_131550642691920_field;
let temp_4511_4515_131550642692208_for_convert;
let temp_4511_4515_131550642692280_;
let temp_4511_4515_131550642692376_;
temp_4511_4515_131550642692376_ = None;
temp_4511_4515_131550642692280_ = temp_4511_4515_131550642692376_;
temp_4511_4515_131550642692208_for_convert = temp_4511_4515_131550642692280_;
temp_4504_4509_131550642691920_field = temp_4511_4515_131550642692208_for_convert;
let temp_4493_4517_131550642691256_new;
temp_4493_4517_131550642691256_new = Tree { field: std::cell::UnsafeCell::new(temp_4504_4509_131550642691920_field), };
temp_4493_4517_131550642691176_for_convert = temp_4493_4517_131550642691248_;
temp_4489_4517_131550642882424_ = temp_4493_4517_131550642691176_for_convert;
let temp_4489_4490_131550642693080_for_convert;
let temp_4489_4490_131550642693152_;
let temp_4489_4490_131550642693248_;
temp_4489_4490_131550642693248_ = a.clone();
temp_4489_4490_131550642693152_ = temp_4489_4490_131550642693248_;
temp_4489_4490_131550642693080_for_convert = temp_4489_4490_131550642693152_;
temp_4489_4517_131550642882424_ = temp_4489_4490_131550642693080_for_convert;
pub fn aaaaaaa() -> Option<test::test::Tree<>> {
    let 
    temp
    : Option<test::test::Tree<>>
    ;
    let temp_4578_4582_131550642689224_for_convert;
    let temp_4578_4582_131550642689296_;
    let temp_4578_4582_131550642689392_;
    temp_4578_4582_131550642689392_ = None;
    temp_4578_4582_131550642689296_ = temp_4578_4582_131550642689392_;
    temp_4578_4582_131550642689224_for_convert = temp_4578_4582_131550642689296_;
    temp = temp_4578_4582_131550642689224_for_convert;
    let temp_4587_4598_131550642681312_;
    let temp_4594_4598_131550642682048_for_convert;
    let temp_4594_4598_131550642682120_;
    let temp_4594_4598_131550642682216_;
    temp_4594_4598_131550642682216_ = temp.get().hold();
    temp_4594_4598_131550642682120_ = temp_4594_4598_131550642682216_;
    temp_4594_4598_131550642682048_for_convert = temp_4594_4598_131550642682120_;
    temp_4587_4598_131550642681312_ = temp_4594_4598_131550642682048_for_convert;
    return temp_4587_4598_131550642681312_;
}
let 
a
;
let temp_4610_4619_131550642680480_for_convert;
let temp_4610_4619_131550642680552_;
let temp_4610_4617_131550642680648_;
temp_4610_4617_131550642680648_ = aaaaaaa.get().hold();
let temp_4617_4619_131550642680736_;
temp_4617_4619_131550642680736_ = temp_4610_4617_131550642680648_().hold();
temp_4610_4619_131550642680552_ = temp_4617_4619_131550642680736_;
temp_4610_4619_131550642680480_for_convert = temp_4610_4619_131550642680552_;
a = temp_4610_4619_131550642680480_for_convert;